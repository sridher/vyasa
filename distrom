#!/usr/bin/env bash

set -e
set -o pipefail

# development environment
#nix develop

RUNAS="doas" # or sudo

# Cleanup
$RUNAS rm vyasa.qcow2 rootfs disk bash-5.2.37 coreutils-9.6 glibc-2.41 linux ncurses-6.5 util-linux-2.40.4 toybox-0.8.12 -rfd
#$RUNAS rm vyasa.qcow2 rootfs disk toolchains bash-5.2.37 coreutils-9.6 glibc-2.41 linux ncurses-6.5 util-linux-2.40.4 toybox-0.8.12 -rfd

export WS=$(pwd)
export VYASA=$(pwd)/rootfs

#mkdir toolchains 
#cd toolchains
#wget https://landley.net/bin/toolchains/25-03-2024/x86_64-linux-musl-cross.tar.xz
##wget https://toolchains.bootlin.com/downloads/releases/toolchains/x86-64/tarballs/x86-64--glibc--bleeding-edge-2024.05-1.tar.xz
#tar -xf x86_64-linux-musl-cross.tar.xz
##tar -xf x86-64--glibc--bleeding-edge-2024.05-1.tar.xz
#cd $WS

export HOST=$WS/toolchains/x86_64-linux-musl-cross/bin/x86_64-linux-musl
#export HOST=$WS/toolchains/x86-64--glibc--bleeding-edge-2024.05-1/bin/x86_64-buildroot-linux-gnu
export TOOL="$HOST"-
export CC="$TOOL"gcc
export CXX="$TOOL"g++

## FIX: `Workaround` mkpasswd.c:(.text.mkpasswd_main+0x1cc): undefined reference to `crypt'
#docker build -t toybox:0.8.12 .
#docker rm -f dummy
#docker create --name dummy toybox:0.8.12
#docker cp -a dummy:/ $VYASA
#docker rm -f dummy

# Rootfs dirs
mkdir $VYASA/{bin,boot,proc,sys,tmp,dev,usr} -p
mkdir $VYASA/usr/{lib64,bin,sbin} -p
cd $VYASA/
#mkdir usr/bin
ln -s usr/bin bin
ln -s usr/sbin sbin
#ln -s usr/lib lib
#ln -s usr/lib64 lib64
cd $WS
# DEBUG:
$RUNAS cp /tmp/nxjs/{ash,bash,dash,nu,mount} $VYASA/bin/

# Sysroot
export SYSROOT=$($CC --print-sysroot)
cp -R "$SYSROOT"/bin $VYASA/
cp -R "$SYSROOT"/include $VYASA/
cp -R "$SYSROOT"/lib $VYASA/


# Kernel
tar -xf linux-6.13.5.tar.zst

cd linux
make distclean
make CROSS_COMPILE=$TOOL tinyconfig

# Kernel config

#64BIT
#BLOCK
#BINFMT_ELF
#BINFMT_SCRIPT
#PRINTK
#DEVTMPFS
#DEVTMPFS_MOUNT
#PCI
#TTY
#SERIAL_8250
#SERIAL_8250_CONSOLE
#BLK_DEV_SD
#ATA
#ATA_PIIX
#EXT4_FS
#PROC_FS
#SYSFS

./scripts/config --set-val CONFIG_64BIT y
./scripts/config --set-val CONFIG_BLOCK y
./scripts/config --set-val CONFIG_BINFMT_ELF y
./scripts/config --set-val CONFIG_BINFMT_SCRIPT y
./scripts/config --set-val CONFIG_PRINTK y
./scripts/config --set-val CONFIG_DEVTMPFS y
./scripts/config --set-val CONFIG_DEVTMPFS_MOUNT y
./scripts/config --set-val CONFIG_PCI y
./scripts/config --set-val CONFIG_TTY y
./scripts/config --set-val CONFIG_SERIAL_8250 y
./scripts/config --set-val CONFIG_SERIAL_8250_CONSOLE y
./scripts/config --set-val CONFIG_BLK_DEV_SD y
./scripts/config --set-val CONFIG_ATA y
./scripts/config --set-val CONFIG_ATA_PIIX y
./scripts/config --set-val CONFIG_EXT4_FS y
./scripts/config --set-val CONFIG_PROC_FS y
./scripts/config --set-val CONFIG_SYSFS y

#Other options

#make defconfig
#make oldconfig
make olddefconfig

mv .config vyasa-miniconfig 
make CROSS_COMPILE=$TOOL allnoconfig KCONFIG_ALLCONFIG=vyasa-miniconfig

make CROSS_COMPILE=$TOOL -j16
cp arch/x86/boot/bzImage $VYASA/boot/vyasa
cd $WS


#export HOST=x86_64-linux-gnu #overwriting to host
export HOST=x86_64-linux-musl #overwriting to host

## Glibc
#tar -xf glibc-2.41.tar.xz
#mkdir glibc-2.41/build -p
#cd glibc-2.41/build
#../configure --host $HOST --disable-werror --libdir=/lib --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
##CFLAGS="-U_FORTIFY_SOURCE -O2 -fno-stack-protector" make -j16
#cd $WS


## Bash
## libtinfo.so.6 not found
#tar -xf bash-5.2.37.tar.gz
#mkdir bash-5.2.37/build -p
#cd bash-5.2.37/build
#../configure --host $HOST --disable-werror --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
#cd $WS

# Coreutils
tar -xf coreutils-9.6.tar.xz
mkdir coreutils-9.6/build -p
cd coreutils-9.6/build
export FORCE_UNSAFE_CONFIGURE=1 # error: you should not run configure as root
../configure --host $HOST --without-selinux --disable-libcap --prefix=/usr

make -j16
make DESTDIR=$VYASA install
cd $WS

## Ncurses
#tar -xf ncurses-6.5.tar.gz
#mkdir ncurses-6.5/build -p
#cd ncurses-6.5/build
#../configure --host $HOST --disable-werror --libdir=/lib --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
#cd $WS


## Util-linux
## FIX: `NIXOS` line 1: ../tools/all_syscalls: cannot execute: required file not found
#if [ ! -f /bin/bash ]; then
#    echo "Bash not found!\n"
#    echo "---------------"
#    echo "Symlinking bash"
#    echo "---------------"
#    $RUNAS ln -s /run/current-system/sw/bin/bash /bin/bash 
#fi
#
#tar -xf util-linux-2.40.4.tar.xz
#mkdir util-linux-2.40.4/build -p
#cd util-linux-2.40.4
#./autogen.sh
#cd build
#../configure --host $HOST --disable-liblastlog2 --prefix=/usr
#
#make -j16
## FIX: `Flake` line 1: make: command not found
#MAKE=$(which make)
#$RUNAS $MAKE DESTDIR=$VYASA install
#cd $WS

# LD
$VYASA/bin/ld --help # check
#$VYASA/bin/ld.so --help # check
#echo "/usr/lib" > $VYASA/etc/ld.so.config
#echo "/usr/lib64" >> $VYASA/etc/ld.so.config


echo "Admin authentication......"
# init
$RUNAS tee -a "$VYASA"/sbin/init > /dev/null << 'EOF' &&
#!/bin/bash
echo "### INIT SCRIPT ###"

PATH=/sbin:/bin:/usr/sbin:/usr/bin

mount -t devtmpfs none /dev
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /tmp

#mknod -m 622 /dev/console c 5 1
#mknod -m 666 /dev/null c 1 3
#mknod -m 666 /dev/zero c 1 5
#mknod -m 666 /dev/ptmx c 5 2
#mknod -m 666 /dev/tty c 5 0 # <--
#mknod -m 444 /dev/random c 1 8
#mknod -m 444 /dev/urandom c 1 9
#chown root:tty /dev/{console,ptmx,tty}

#ls -la /dev/{console,null,zero,ptmx,tty,random,urandom,ttyS*}

echo -e "\nThis boot took $(cut -d' ' -f1 /proc/uptime) seconds\n"
exec /bin/bash
EOF
$RUNAS chmod +x "$VYASA"/sbin/init

# fdisk
cd $WS
qemu-img create -f qcow2 vyasa.qcow2 2G

#lsmod | grep nbd
#modprobe nbd max_parts=8
lsmod | grep nbd

$RUNAS qemu-nbd --connect=/dev/nbd0 vyasa.qcow2
sleep 5

$RUNAS fdisk /dev/nbd0 <<EOF
n
p
1


a
w
EOF
$RUNAS fdisk -l /dev/nbd0
lsblk -a | grep nbd0p1
#mknod /dev/nbd0p1 b 43 1
$RUNAS mkfs.ext4 /dev/nbd0p1

mkdir $WS/disk
$RUNAS mount /dev/nbd0p1 $WS/disk

$RUNAS cp -R $VYASA/* $WS/disk

#grub
$RUNAS grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0
#grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0 --force

#mkdir $WS/disk/boot/grub -p
$RUNAS tee -a $WS/disk/boot/grub/grub.cfg > /dev/null <<EOF
menuentry 'Vyasa' {
    set root='(hd0,1)'
    linux /boot/vyasa root=/dev/sda1 rw 
}
EOF
#console=ttyS0

sync
sync
sync
$RUNAS umount  $WS/disk
$RUNAS qemu-nbd --disconnect /dev/nbd0
sync
sync
sync


exit 0
