#!/usr/bin/env bash

set -e -u -o pipefail

# development environment
#nix develop

RUNAS="" # doas or sudo

#https://www.shellhacks.com/bash-colors/
#❯ neofetch
# fg = 30..37
# bg = 40..47
# lfg = 1;{30..37}
# lbg = 1;{40..47}

# MODIFICATIONS: 0 -> Normal, 1 -> Bold, 4 -> Underline, 5 -> Blinking, 7 -> Reverse video char
# -e    	Enable interpretation of backslash escapes
# \e[   	Begin the color modifications
# COLORm	Color Code + ‘m’ at the end
# \e[0m 	End code in the color modifications
#
# echo -e "\e[COLORmSample Text\e[0m"
# echo -e "\e[COLOR1;COLOR2mSample Text\e[0m"

echo -e "\e[1;34mBuilding Vyasa linux....\e[0m"

# Warmup admin
echo -e "\e[1;36m$(uname -a)\e[0m"

# Cleanup
SECONDS=0
TOTALTIME=0

WS=/
VYASA=/
VYASA_TGT=$(uname -m)-vyasa-linux-gnu
#VYASA_TGT=$(uname -m)-vyasa-linux-musl


# Setup just built toolchain
PATH=$VYASA/tools/bin:$PATH
TOOL="$VYASA_TGT"-
CC="$TOOL"gcc
CXX="$TOOL"g++
MAKE=make

env | rg "vyasa|VYASA"

# iproute - deps: elfutils, libcap, libz, libzstd
# ------------------------------
cd $WS/builds
tar -xf ../sources/iproute2-6.13.0.tar.xz
#mkdir iproute2-6.13.0.tar.xz/build -p
cd iproute2-6.13.0
./configure --libbpf_force off --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33miproute compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# Util-linux
# ------------------------------
cd $WS/builds
tar -xf ../sources/util-linux-2.40.4.tar.xz
mkdir util-linux-2.40.4/build -p
cd util-linux-2.40.4
./autogen.sh
cd build

../configure --prefix=/usr   \
            --host=$VYASA_TGT \
            --disable-pylibmount  \
            --disable-static      \
            --disable-liblastlog2 \
            --without-python      


make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mutil-linux compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# elfutils
# ------------------------------
cd $WS/builds
tar -xf ../sources/elfutils-0.192.tar.bz2
mkdir elfutils-0.192/build -p
cd elfutils-0.192/
autoreconf -i -f
cd build/
../configure --host $VYASA_TGT --disable-option-checking --enable-maintainer-mode --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33melfutils compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# openssl
# ------------------------------
cd $WS/builds
tar -xf ../sources/openssl-3.4.1.tar.gz
mkdir openssl-openssl-3.4.1/build -p
cd openssl-openssl-3.4.1/build
../Configure --prefix=/usr --libdir=lib

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mopenssl compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# wget
# ------------------------------
cd $WS/builds
tar -xf ../sources/wget-1.25.0.tar.gz
mkdir wget-1.25.0/build -p
cd wget-1.25.0/build
../configure --host $VYASA_TGT --with-ssl=openssl OPENSSL_CFLAGS=-I$VYASA/usr/include OPENSSL_LIBS="-L$VYASA/usr/lib -lssl -lcrypto"

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mwget compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# libcap
# ------------------------------
cd $WS/builds
tar -xf ../sources/libcap-2.75.tar.gz
cd libcap-2.75
make -j16
$RUNAS $MAKE DESTDIR=$VYASA/lib install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mlibcap compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# zlib
# ------------------------------
cd $WS/builds
tar -xf ../sources/zlib-1.3.1.tar.xz
mkdir zlib-1.3.1/build -p
cd zlib-1.3.1/build
../configure --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mzlib compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# zstd
# ------------------------------
cd $WS/builds
tar -xf ../sources/zstd-1.5.7.tar.gz
cd zstd-1.5.7/
make -j16
$RUNAS $MAKE DESTDIR=$VYASA PREFIX=/usr install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mzstd compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# dnsmasq2
# ------------------------------
cd $WS/builds
tar -xf ../sources/dnsmasq-2.90.tar.xz
cd dnsmasq-2.90
make -j16
cp src/dnsmasq $VYASA/bin
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mdnsmasq2 compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# Glibc
# ------------------------------
cd $WS/builds
tar -xf ../sources/glibc-2.41.tar.xz
mkdir glibc-2.41/build -p
cd glibc-2.41/build
../configure                    \
    --prefix=/usr               \
    --host=$VYASA_TGT           \
    --build=$(../config.guess)  \
    --libdir=/lib               \
    --disable-werror            \
    libc_cv_c_cleanup=yes       \
    libc_cv_forced_unwind=yes


make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
#CFLAGS="-U_FORTIFY_SOURCE -O2 -fno-stack-protector" make -j16
cd $WS

duration=$SECONDS
echo -e "\e[1;33mglibc compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

## musl-libc
#tar -xf musl-1.2.5.tar.gz
#mkdir musl-1.2.5/build -p
#cd musl-1.2.5/build
#../configure --host $VYASA_TGT --disable-werror --libdir=/lib --prefix=/usr
#
#make -j16
#$RUNAS $MAKE DESTDIR=$VYASA install
##CFLAGS="-U_FORTIFY_SOURCE -O2 -fno-stack-protector" make -j16
#cd $WS
#
#duration=$SECONDS
#echo -e "\e[1;33mmusllibc compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
#TOTALTIME=$((TOTALTIME + duration))
#SECONDS=0


# Kernel
# ------------------------------
cd $WS/builds
tar -xf ../sources/linux-6.13.5.tar.zst

cd linux
make distclean
make CROSS_COMPILE=$TOOL tinyconfig

# Kernel config

#64BIT
#BLOCK
#BINFMT_ELF
#BINFMT_SCRIPT
#PRINTK
#DEVTMPFS
#DEVTMPFS_MOUNT
#PCI
#TTY
#SERIAL_8250
#SERIAL_8250_CONSOLE
#BLK_DEV_SD
#ATA
#ATA_PIIX
#EXT4_FS
#PROC_FS
#SYSFS

./scripts/config --set-val CONFIG_64BIT y
./scripts/config --set-val CONFIG_BLOCK y
./scripts/config --set-val CONFIG_BINFMT_ELF y
./scripts/config --set-val CONFIG_BINFMT_SCRIPT y
./scripts/config --set-val CONFIG_PRINTK y
./scripts/config --set-val CONFIG_DEVTMPFS y
./scripts/config --set-val CONFIG_DEVTMPFS_MOUNT y
./scripts/config --set-val CONFIG_PCI y
./scripts/config --set-val CONFIG_TTY y
./scripts/config --set-val CONFIG_SERIAL_8250 y
./scripts/config --set-val CONFIG_SERIAL_8250_CONSOLE y
./scripts/config --set-val CONFIG_BLK_DEV_SD y
./scripts/config --set-val CONFIG_ATA y
./scripts/config --set-val CONFIG_ATA_PIIX y
./scripts/config --set-val CONFIG_EXT4_FS y
./scripts/config --set-val CONFIG_PROC_FS y
./scripts/config --set-val CONFIG_SYSFS y

# Other options
#./scripts/config --set-val CONFIG_TTY_PRINTK y
./scripts/config --set-val CONFIG_EARLY_PRINTK y
#./scripts/config --set-val CONFIG_VIRTIO_CONSOLE y
#./scripts/config --set-val CONFIG_VT_HW_CONSOLE_BINDING y

# Network
#EXPERT
#FUTEX
#COMPAT_32BIT_TIME
#NET
#PACKET
#UNIX
#INET
#NETDEVICES
#ETHERNET
#E1000
#INOTIFY_USER

./scripts/config --set-val CONFIG_EXPERT y
./scripts/config --set-val CONFIG_FUTEX y
./scripts/config --set-val CONFIG_COMPAT_32BIT_TIME y
./scripts/config --set-val CONFIG_NET y
./scripts/config --set-val CONFIG_PACKET y
./scripts/config --set-val CONFIG_UNIX y
./scripts/config --set-val CONFIG_INET y
./scripts/config --set-val CONFIG_NETDEVICES y
./scripts/config --set-val CONFIG_ETHERNET y
./scripts/config --set-val CONFIG_E1000 y
./scripts/config --set-val CONFIG_INOTIFY_USER y

#make defconfig
#make oldconfig
make olddefconfig

mv .config vyasa-miniconfig 
make CROSS_COMPILE=$TOOL allnoconfig KCONFIG_ALLCONFIG=vyasa-miniconfig
cp .config vyasa-config 

make CROSS_COMPILE=$TOOL -j16
cp arch/x86/boot/bzImage $VYASA/boot/vyasa
cd $WS

duration=$SECONDS
echo -e "\e[1;33mKernel compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# LD
#echo -e "\e[1;32m$($VYASA/lib/libc.so $VYASA/usr/bin/uname -a)\e[0m"
#ldconfig /usr/local/lib64/
#openssl version -a
#echo "/lib:/usr/local/lib:/usr/lib" > /etc/ld-musl-x86_64.path
#$VYASA/bin/ld --help # check
$VYASA/bin/ld.so --help # check
$RUNAS tee -a $VYASA/etc/nsswitch.conf > /dev/null <<EOF
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF

$RUNAS tee -a $VYASA/etc/ld.so.config > /dev/null <<EOF
/lib
/lib64
/usr/lib
/usr/lib64
/usr/local/lib
/usr/local/lib64
/opt/lib
EOF

#❯ ldconfig # target machine
# ldconfig -p # target machine
# ldconfig -n /usr/lib64/libssl.so.3
#❯ ldconfig -v -r -f etc/ld.so.config -C etc/ld.so.cache ./
#❯ ldconfig -v -r -f /etc/ld.so.config -C /etc/ld.so.cache ./
#/tmp # ldd /usr/bin/openssl


exit 0
