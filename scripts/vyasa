#!/usr/bin/env bash

set -e -u -o pipefail

# development environment
# bwrap/chroot develop
# nix develop

RUNAS="doas" # or sudo

#https://www.shellhacks.com/bash-colors/
#❯ neofetch
# fg = 30..37
# bg = 40..47
# lfg = 1;{30..37}
# lbg = 1;{40..47}

# MODIFICATIONS: 0 -> Normal, 1 -> Bold, 4 -> Underline, 5 -> Blinking, 7 -> Reverse video char
# -e    	Enable interpretation of backslash escapes
# \e[   	Begin the color modifications
# COLORm	Color Code + ‘m’ at the end
# \e[0m 	End code in the color modifications
#
# echo -e "\e[COLORmSample Text\e[0m"
# echo -e "\e[COLOR1;COLOR2mSample Text\e[0m"

echo -e "\e[1;34mBuilding Vyasa linux....\e[0m"

WS="$(pwd)"
VYASA="$(pwd)"/rootfs
VYASA_TGT=$(uname -m)-vyasa-linux-gnu
#VYASA_TGT=$(uname -m)-vyasa-linux-musl

export WS VYASA VYASA_TGT

# Warmup admin
$RUNAS echo -e "\e[1;36m$(uname -a)\e[0m"
$RUNAS chown -R root:root "$VYASA"/{usr,lib,lib64,var,etc,bin,sbin}

# FIX: `NIXOS` : ../tools/all_syscalls: cannot execute: required file not found
# Applications expecting absolute path
if [ ! -f /bin/bash ]; then
    echo -e "\e[1;31mBash not found!\n"
    echo -e "\e[1;30m---------------"
    echo -e "\e[1;34mSymlinking bash"
    echo -e "\e[1;30m---------------"
    $RUNAS ln -s /run/current-system/sw/bin/bash /bin/bash
    $RUNAS ln -s /etc/profiles/per-user/js/bin/python3 /usr/bin
fi


# Cleanup
SECONDS=0
TOTALTIME=0

bash -e ./scripts/wrap /vyasa/chroot/pre

duration=$SECONDS
echo -e "\e[1;33mPre init took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

for pack in gettext bison perl python texinfo util-linux; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/chroot/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Building Kernel and Diskimage
#❯ qemu-system-x86_64 -machine pc,accel=kvm -cpu host vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu host -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu EPYC -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot

for pack in man-pages iana glibc zlib bzip xz lz4 zstd file readline m4 bc binutils ncurses nano openssl wget libcap flex iproute dnsmasq2; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/pkgs/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Cleanup
bash -e ./scripts/wrap /vyasa/chroot/cleanup

#cd $VYASA
# create, --lzip, J(xz), --zstd, permissions, file
#❯ doas tar -cJpf vyasa-temp-tools.tar.xz .
#❯ doas tar --lzip -cpf vyasa-temp-tools.tar.lz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.txz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.tar.xz .
#❯ doas tar --sort=name --mtime="@0" --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime  -cJpf build.tar.xz builddir
#cd $WS

#❯ sha vyasa-temp-tools.tar.xz

# Kernel
# ------------------------------
cd $WS/builds
tar -xf ../sources/linux-6.13.5.tar.zst

cd linux
make distclean
make tinyconfig

# Kernel config

#64BIT
#BLOCK
#BINFMT_ELF
#BINFMT_SCRIPT
#PRINTK
#DEVTMPFS
#DEVTMPFS_MOUNT
#PCI
#TTY
#SERIAL_8250
#SERIAL_8250_CONSOLE
#BLK_DEV_SD
#ATA
#ATA_PIIX
#EXT4_FS
#PROC_FS
#SYSFS

./scripts/config --set-val CONFIG_64BIT y
./scripts/config --set-val CONFIG_BLOCK y
./scripts/config --set-val CONFIG_BINFMT_ELF y
./scripts/config --set-val CONFIG_BINFMT_SCRIPT y
./scripts/config --set-val CONFIG_PRINTK y
./scripts/config --set-val CONFIG_DEVTMPFS y
./scripts/config --set-val CONFIG_DEVTMPFS_MOUNT y
./scripts/config --set-val CONFIG_PCI y
./scripts/config --set-val CONFIG_TTY y
./scripts/config --set-val CONFIG_SERIAL_8250 y
./scripts/config --set-val CONFIG_SERIAL_8250_CONSOLE y
./scripts/config --set-val CONFIG_BLK_DEV_SD y
./scripts/config --set-val CONFIG_ATA y
./scripts/config --set-val CONFIG_ATA_PIIX y
./scripts/config --set-val CONFIG_EXT4_FS y
./scripts/config --set-val CONFIG_PROC_FS y
./scripts/config --set-val CONFIG_SYSFS y

# Other options
#./scripts/config --set-val CONFIG_TTY_PRINTK y
./scripts/config --set-val CONFIG_EARLY_PRINTK y
#./scripts/config --set-val CONFIG_VIRTIO_CONSOLE y
#./scripts/config --set-val CONFIG_VT_HW_CONSOLE_BINDING y

./scripts/config --set-val CONFIG_KEYS y
./scripts/config --set-val CONFIG_EVENTFD y
./scripts/config --set-val CONFIG_DNS_RESOLVER Y
./scripts/config --set-val CONFIG_POSIX_TIMERS y

# Network
#EXPERT
#FUTEX
#COMPAT_32BIT_TIME
#NET
#PACKET
#UNIX
#INET
#NETDEVICES
#ETHERNET
#E1000
#INOTIFY_USER

./scripts/config --set-val CONFIG_EXPERT y
./scripts/config --set-val CONFIG_FUTEX y
./scripts/config --set-val CONFIG_COMPAT_32BIT_TIME y
./scripts/config --set-val CONFIG_NET y
./scripts/config --set-val CONFIG_PACKET y
./scripts/config --set-val CONFIG_UNIX y
./scripts/config --set-val CONFIG_INET y
./scripts/config --set-val CONFIG_NETDEVICES y
./scripts/config --set-val CONFIG_ETHERNET y
./scripts/config --set-val CONFIG_E1000 y
./scripts/config --set-val CONFIG_INOTIFY_USER y

# QEMU q35
./scripts/config --set-val CONFIG_E1000E y
./scripts/config --set-val CONFIG_SCSI_TGT y
./scripts/config --set-val CONFIG_SATA_AHCI y
./scripts/config --set-val CONFIG_SATA_AHCI_PLATFORM y
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu EPYC -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu Skylake-Server -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot

# QEMU virt
#./scripts/config --set-val CONFIG_PCI y
#./scripts/config --set-val CONFIG_VIRTIO_PCI y
#./scripts/config --set-val CONFIG_PCI_HOST_GENERIC y
# virtio-gpu-pci
#./scripts/config --set-val CONFIG_DRM y
#./scripts/config --set-val CONFIG_DRM_VIRTIO_GPU y

#make defconfig
#make oldconfig
make olddefconfig

mv .config vyasa-miniconfig 
make allnoconfig KCONFIG_ALLCONFIG=vyasa-miniconfig
cp .config vyasa-config 

make -j16
cp arch/x86/boot/bzImage $VYASA/boot/vyasa
cd $WS

duration=$SECONDS
echo -e "\e[1;33mKernel compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# LD
#echo -e "\e[1;32m$($VYASA/lib/libc.so $VYASA/usr/bin/uname -a)\e[0m"
#ldconfig /usr/local/lib64/
#openssl version -a
#echo "/lib:/usr/local/lib:/usr/lib" > /etc/ld-musl-x86_64.path
#$VYASA/bin/ld --help # check
$VYASA/bin/ld.so --help # check
$RUNAS tee -a $VYASA/etc/nsswitch.conf > /dev/null <<EOF
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF

$RUNAS mkdir -pv $VYASA/etc/ld.so.conf.d
$RUNAS tee -a $VYASA/etc/ld.so.config > /dev/null <<EOF
/lib
/lib64
/usr/lib
/usr/lib64
/usr/local/lib
/usr/local/lib64
/opt/lib
include /etc/ld.so.conf.d/*.conf
EOF

#❯ ldconfig # target machine
# ldconfig -p # target machine
# ldconfig -n /usr/lib64/libssl.so.3
#❯ ldconfig -v -r -f etc/ld.so.config -C etc/ld.so.cache ./
#❯ ldconfig -v -r -f /etc/ld.so.config -C /etc/ld.so.cache ./
#/tmp # ldd /usr/bin/openssl

# fdisk
cd $WS

$RUNAS modprobe nbd max_parts=8

qemu-img create -f qcow2 vyasa.qcow2 7G

#lsmod | grep nbd
#modprobe nbd max_parts=8
lsmod | grep nbd

#echo -e "\e[1;33mAdmin authentication.......\e[0m"
$RUNAS qemu-nbd --connect=/dev/nbd0 vyasa.qcow2
sleep 5

$RUNAS fdisk /dev/nbd0 <<EOF
n
p
1


a
w
EOF
$RUNAS fdisk -l /dev/nbd0
lsblk -a | grep nbd0p1
#mknod /dev/nbd0p1 b 43 1
$RUNAS mkfs.ext4 /dev/nbd0p1

mkdir $WS/disk -p
$RUNAS mount /dev/nbd0p1 $WS/disk

$RUNAS cp -R $VYASA/* $WS/disk

#grub
$RUNAS grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0
#grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0 --force

#mkdir $WS/disk/boot/grub -p
$RUNAS tee -a $WS/disk/boot/grub/grub.cfg > /dev/null <<EOF
menuentry 'Vyasa' {
    set root='(hd0,1)'
    linux /boot/vyasa root=/dev/sda1 rw console=tty0 console=ttyS0
}
EOF

sync
sync
sync
$RUNAS umount  $WS/disk
$RUNAS qemu-nbd --disconnect /dev/nbd0
sync
sync
sync


duration=$SECONDS
echo -e "\e[1;33mPost processing took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

exit 0
