#!/usr/bin/env bash

set -e
set -o pipefail

# development environment
#nix develop

RUNAS="doas" # or sudo

#https://www.shellhacks.com/bash-colors/
#❯ neofetch
# fg = 30..37
# bg = 40..47
# lfg = 1;{30..37}
# lbg = 1;{40..47}

# MODIFICATIONS: 0 -> Normal, 1 -> Bold, 4 -> Underline, 5 -> Blinking, 7 -> Reverse video char
# -e    	Enable interpretation of backslash escapes
# \e[   	Begin the color modifications
# COLORm	Color Code + ‘m’ at the end
# \e[0m 	End code in the color modifications
#
# echo -e "\e[COLORmSample Text\e[0m"
# echo -e "\e[COLOR1;COLOR2mSample Text\e[0m"

echo -e "\e[1;34mBuilding Vyasa linux....\e[0m"

# Warmup admin
$RUNAS echo -e "\e[1;36m$(uname -a)\e[0m"

$RUNAS modprobe nbd max_parts=8

# Cleanup
SECONDS=0
TOTALTIME=0

$RUNAS rm vyasa.qcow2 rootfs disk bash-5.2.37 coreutils-9.6 glibc-2.41 linux ncurses-6.5 util-linux-2.40.4 iproute2-6.13.0 elfutils-0.192 openssl-3.4.1 wget-1.25.0 libcap-2.75 zlib-1.3.1 zstd-1.5.7 musl-1.2.5 toybox-0.8.12 -rfd
#$RUNAS rm vyasa.qcow2 rootfs disk toolchains bash-5.2.37 coreutils-9.6 glibc-2.41 linux ncurses-6.5 util-linux-2.40.4 iproute2-6.13.0 elfutils-0.192 openssl-3.4.1 wget-1.25.0 libcap-2.75 zlib-1.3.1 zstd-1.5.7 musl-1.2.5 toybox-0.8.12 -rfd

export WS=$(pwd)
export VYASA=$(pwd)/rootfs

#mkdir toolchains 
#cd toolchains
#wget https://landley.net/bin/toolchains/25-03-2024/x86_64-linux-musl-cross.tar.xz
##wget https://toolchains.bootlin.com/downloads/releases/toolchains/x86-64/tarballs/x86-64--glibc--bleeding-edge-2024.05-1.tar.xz
#tar -xf x86_64-linux-musl-cross.tar.xz
##tar -xf x86-64--glibc--bleeding-edge-2024.05-1.tar.xz
#cd $WS

export HOST=$WS/toolchains/x86_64-linux-musl-cross/bin/x86_64-linux-musl
#export HOST=$WS/toolchains/x86-64--glibc--bleeding-edge-2024.05-1/bin/x86_64-buildroot-linux-gnu
export TOOL="$HOST"-
export CC="$TOOL"gcc
export CXX="$TOOL"g++
MAKE=$(which make)

## FIX: `Workaround` mkpasswd.c:(.text.mkpasswd_main+0x1cc): undefined reference to `crypt'
#docker build -t toybox:0.8.12 .
#docker rm -f dummy
#docker create --name dummy toybox:0.8.12
#docker cp -a dummy:/ $VYASA
#docker rm -f dummy

# Rootfs dirs
mkdir -p "$VYASA"/{boot,dev,etc/rc,home,mnt,proc,root,sys,tmp/run,usr/{bin,sbin,lib},var/run} &&
chmod a+rwxt "$VYASA"/tmp && ln -s usr/{bin,sbin,lib} tmp/run "$VYASA"
# DEBUG:
cp /tmp/nxjs/{ash,bash,dash,fish,micro,nu,ping,wget} $VYASA/bin/

# init
$RUNAS tee -a "$VYASA"/sbin/init > /dev/null << 'EOF' &&
#!/bin/bash
echo -e "\e[1;36m### INIT SCRIPT ###\e[0m"

export HOME=/home PATH=/bin:/sbin:/usr/bin:/usr/sbin

mount -t devtmpfs none /dev
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /tmp

ip link set up eth0
ip addr add 10.0.2.11/24 dev eth0
ip route add 10.0.2.2 dev eth0
ip route add 0/0 via 10.0.2.2 dev eth0

dnsmasq -uroot

#mknod -m 622 /dev/console c 5 1
#mknod -m 666 /dev/null c 1 3
#mknod -m 666 /dev/zero c 1 5
#mknod -m 666 /dev/ptmx c 5 2
#mknod -m 666 /dev/tty c 5 0 # <--
#mknod -m 444 /dev/random c 1 8
#mknod -m 444 /dev/urandom c 1 9
#chown root:tty /dev/{console,ptmx,tty}

#ls -la /dev/{console,null,zero,ptmx,tty,random,urandom,ttyS*}

echo -e "\e[1;36m\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\e[0m\n\e[1;34m"
cat <<!


@@@  @@@  @@@ @@@   @@@@@@    @@@@@@    @@@@@@  
@@@  @@@  @@@ @@@  @@@@@@@@  @@@@@@@   @@@@@@@@ 
@@!  @@@  @@! !@@  @@!  @@@  !@@       @@!  @@@ 
!@!  @!@  !@! @!!  !@!  @!@  !@!       !@!  @!@ 
@!@  !@!   !@!@!   @!@!@!@!  !!@@!!    @!@!@!@! 
!@!  !!!    @!!!   !!!@!!!!   !!@!!!   !!!@!!!! 
:!:  !!:    !!:    !!:  !!!       !:!  !!:  !!! 
 ::!!:!     :!:    :!:  !:!      !:!   :!:  !:! 
  ::::       ::    ::   :::  :::: ::   ::   ::: 
   :         :      :   : :  :: : :     :   : : 


!

echo -e "\e[0m\e[1;33m\nWelcome to Vysa linux\e[0m\n"

exec /bin/bash
EOF
$RUNAS chmod +x "$VYASA"/sbin/init

# Distro
$RUNAS tee -a "$VYASA"/etc/passwd > /dev/null << 'EOF' &&
root:x:0:0:root:/root:/bin/sh
guest:x:500:500:guest:/home/guest:/bin/sh
nobody:x:65534:65534:nobody:/proc/self:/dev/null
EOF

$RUNAS tee -a "$VYASA"/etc/group > /dev/null << 'EOF' &&
root:x:0:\nguest:x:500:\nnobody:x:65534:
EOF

$RUNAS tee -a "$VYASA"/etc/resolv.conf > /dev/null << 'EOF' &&
nameserver 1.1.1.1
nameserver 8.8.8.8
EOF

mkdir "$VYASA"/etc/ssl/certs -p
wget https://curl.haxx.se/ca/cacert.pem
cp cacert.pem "$VYASA"/etc/ssl/certs/ca-certificates.crt
rm cacert.pem 

$RUNAS tee -a "$VYASA"/etc/os-release > /dev/null << 'EOF' &&
NAME="Vyasa linux"
VERSION="pre.alpha"
EOF

$RUNAS tee -a "$VYASA"/etc/environment > /dev/null << 'EOF' &&
#Only programs compiled with PAM (Pluggable Authentication Module) support are able to use it (primarily login systems, which subsequently start the shell or user environment).     
PATH=/usr/bin:/usr/sbin
#PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
EOF

$RUNAS tee -a "$VYASA"/etc/profile > /dev/null << 'EOF' &&
# Executed whenever a shell is entered (e.g. when logging in from the console or over ssh)
if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi
export HOME=/home PATH=/bin:/sbin:/usr/bin:/usr/sbin
EOF

## Sysroot
#export SYSROOT=$($CC --print-sysroot)
#cp -R "$SYSROOT"/bin $VYASA/
#cp -R "$SYSROOT"/include $VYASA/
#cp -R "$SYSROOT"/lib $VYASA/

duration=$SECONDS
echo -e "\e[1;33mPre init took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

#export HOST=x86_64-linux-gnu #overwriting to host
export HOST=x86_64-linux-musl #overwriting to host

# Kernel
tar -xf linux-6.13.5.tar.zst

cd linux
make distclean
make CROSS_COMPILE=$TOOL tinyconfig

# Kernel config

#64BIT
#BLOCK
#BINFMT_ELF
#BINFMT_SCRIPT
#PRINTK
#DEVTMPFS
#DEVTMPFS_MOUNT
#PCI
#TTY
#SERIAL_8250
#SERIAL_8250_CONSOLE
#BLK_DEV_SD
#ATA
#ATA_PIIX
#EXT4_FS
#PROC_FS
#SYSFS

./scripts/config --set-val CONFIG_64BIT y
./scripts/config --set-val CONFIG_BLOCK y
./scripts/config --set-val CONFIG_BINFMT_ELF y
./scripts/config --set-val CONFIG_BINFMT_SCRIPT y
./scripts/config --set-val CONFIG_PRINTK y
./scripts/config --set-val CONFIG_DEVTMPFS y
./scripts/config --set-val CONFIG_DEVTMPFS_MOUNT y
./scripts/config --set-val CONFIG_PCI y
./scripts/config --set-val CONFIG_TTY y
./scripts/config --set-val CONFIG_SERIAL_8250 y
./scripts/config --set-val CONFIG_SERIAL_8250_CONSOLE y
./scripts/config --set-val CONFIG_BLK_DEV_SD y
./scripts/config --set-val CONFIG_ATA y
./scripts/config --set-val CONFIG_ATA_PIIX y
./scripts/config --set-val CONFIG_EXT4_FS y
./scripts/config --set-val CONFIG_PROC_FS y
./scripts/config --set-val CONFIG_SYSFS y

# Other options
#./scripts/config --set-val CONFIG_TTY_PRINTK y
./scripts/config --set-val CONFIG_EARLY_PRINTK y
#./scripts/config --set-val CONFIG_VIRTIO_CONSOLE y
#./scripts/config --set-val CONFIG_VT_HW_CONSOLE_BINDING y

# Network
#EXPERT
#FUTEX
#COMPAT_32BIT_TIME
#NET
#PACKET
#UNIX
#INET
#NETDEVICES
#ETHERNET
#E1000
#INOTIFY_USER

./scripts/config --set-val CONFIG_EXPERT y
./scripts/config --set-val CONFIG_FUTEX y
./scripts/config --set-val CONFIG_COMPAT_32BIT_TIME y
./scripts/config --set-val CONFIG_NET y
./scripts/config --set-val CONFIG_PACKET y
./scripts/config --set-val CONFIG_UNIX y
./scripts/config --set-val CONFIG_INET y
./scripts/config --set-val CONFIG_NETDEVICES y
./scripts/config --set-val CONFIG_ETHERNET y
./scripts/config --set-val CONFIG_E1000 y
./scripts/config --set-val CONFIG_INOTIFY_USER y

#make defconfig
#make oldconfig
make olddefconfig

mv .config vyasa-miniconfig 
make CROSS_COMPILE=$TOOL allnoconfig KCONFIG_ALLCONFIG=vyasa-miniconfig

make CROSS_COMPILE=$TOOL -j16
cp arch/x86/boot/bzImage $VYASA/boot/vyasa
cd $WS

duration=$SECONDS
echo -e "\e[1;33mKernel compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# Static
#❯ ldd /tmp/nxjs/fish
#❯ cp result/bin/fish* /tmp/nxjs/
#❯ nix build -L nixpkgs#pkgsStatic.fish
#❯ nix build -L nixpkgs#pkgsStatic.toybox

## Glibc
#tar -xf glibc-2.41.tar.xz
#mkdir glibc-2.41/build -p
#cd glibc-2.41/build
#../configure --host $HOST --disable-werror --libdir=/lib --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
##CFLAGS="-U_FORTIFY_SOURCE -O2 -fno-stack-protector" make -j16
#cd $WS

# musl-libc
tar -xf musl-1.2.5.tar.gz
mkdir musl-1.2.5/build -p
cd musl-1.2.5/build
../configure --host $HOST --disable-werror --libdir=/lib --prefix=/usr

make -j16
make DESTDIR=$VYASA install
#CFLAGS="-U_FORTIFY_SOURCE -O2 -fno-stack-protector" make -j16
cd $WS

duration=$SECONDS
echo -e "\e[1;33mmusllibc compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

## Bash
## bash: xmalloc: ../locale.c:84: cannot allocate 6 bytes (0 bytes allocated
#tar -xf bash-5.2.37.tar.gz
#mkdir bash-5.2.37/build -p
#cd bash-5.2.37/build
#../configure --host $HOST --disable-werror --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
#cd $WS

# Coreutils
tar -xf coreutils-9.6.tar.xz
mkdir coreutils-9.6/build -p
cd coreutils-9.6/build
export FORCE_UNSAFE_CONFIGURE=1 # error: you should not run configure as root
../configure --host $HOST --without-selinux --disable-libcap --prefix=/usr

make -j16
make DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mcoreutils compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# Ncurses
tar -xf ncurses-6.5.tar.gz
mkdir ncurses-6.5/build -p
cd ncurses-6.5/build
../configure --host $HOST --disable-werror --libdir=/lib --prefix=/usr

make -j16
make DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mncurces compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# Util-linux
# FIX: `NIXOS` line 1: ../tools/all_syscalls: cannot execute: required file not found
if [ ! -f /bin/bash ]; then
    echo -e "\e[1;31mBash not found!\n"
    echo -e "\e[1;30m---------------"
    echo -e "\e[1;34mSymlinking bash"
    echo -e "\e[1;30m---------------"
    $RUNAS ln -s /run/current-system/sw/bin/bash /bin/bash 
fi

tar -xf util-linux-2.40.4.tar.xz
mkdir util-linux-2.40.4/build -p
cd util-linux-2.40.4
./autogen.sh
cd build
../configure --host $HOST --disable-liblastlog2 --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mutil-linux compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# iproute - deps: elfutils, libcap, libz, libzstd
tar -xf iproute2-6.13.0.tar.xz
#mkdir iproute2-6.13.0.tar.xz/build -p
cd iproute2-6.13.0
./configure --libbpf_force off --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33miproute compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

## elfutils
#tar -xf elfutils-0.192.tar.bz2
#mkdir elfutils-0.192/build -p
#cd elfutils-0.192/
#autoreconf -i -f
#cd build/
#../configure --host $HOST --disable-option-checking --enable-maintainer-mode --prefix=/usr
#
#make -j16
#make DESTDIR=$VYASA install
#cd $WS
#
#duration=$SECONDS
#echo -e "\e[1;33melfutils compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
#TOTALTIME=$((TOTALTIME + duration))
#SECONDS=0


# openssl
tar -xf openssl-3.4.1.tar.gz
mkdir openssl-openssl-3.4.1/build -p
cd openssl-openssl-3.4.1/build
../Configure --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mopenssl compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# wget
tar -xf wget-1.25.0.tar.gz
mkdir wget-1.25.0/build -p
cd wget-1.25.0/build
../configure --host $HOST --with-ssl=openssl OPENSSL_CFLAGS=-I$VYASA/usr/include OPENSSL_LIBS="-L$VYASA/usr/lib64 -lssl -lcrypto"

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mwget compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# libcap
tar -xf libcap-2.75.tar.gz
cd libcap-2.75
make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mlibcap compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# libz
tar -xf zlib-1.3.1.tar.xz
mkdir zlib-1.3.1/build -p
cd zlib-1.3.1/build
../configure --prefix=/usr

make -j16
$RUNAS $MAKE DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mzlib compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# zstd
tar -xf zstd-1.5.7.tar.gz
cd zstd-1.5.7/
make -j16
$RUNAS $MAKE DESTDIR=$VYASA PREFIX=/usr install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mzstd compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# dnsmasq2
tar -xf dnsmasq-2.90.tar.xz
cd dnsmasq-2.90
make -j16
cp src/dnsmasq $VYASA/bin
$RUNAS $MAKE  DESTDIR=$VYASA install
cd $WS

duration=$SECONDS
echo -e "\e[1;33mdnsmasq2 compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

# LD
echo -e "\e[1;32m$($VYASA/lib/libc.so $VYASA/usr/bin/uname -a)\e[0m"

#$VYASA/bin/ld --help # check
#$VYASA/bin/ld.so --help # check
#echo -e "\e[1;33m/usr/lib" > $VYASA/etc/ld.so.config
#echo -e "\e[1;33m/usr/lib64" >> $VYASA/etc/ld.so.config

# fdisk
cd $WS
qemu-img create -f qcow2 vyasa.qcow2 2G

#lsmod | grep nbd
#modprobe nbd max_parts=8
lsmod | grep nbd

#echo -e "\e[1;33mAdmin authentication.......\e[0m"
$RUNAS qemu-nbd --connect=/dev/nbd0 vyasa.qcow2
sleep 5

$RUNAS fdisk /dev/nbd0 <<EOF
n
p
1


a
w
EOF
$RUNAS fdisk -l /dev/nbd0
lsblk -a | grep nbd0p1
#mknod /dev/nbd0p1 b 43 1
$RUNAS mkfs.ext4 /dev/nbd0p1

mkdir $WS/disk
$RUNAS mount /dev/nbd0p1 $WS/disk

$RUNAS cp -R $VYASA/* $WS/disk

#grub
$RUNAS grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0
#grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0 --force

#mkdir $WS/disk/boot/grub -p
$RUNAS tee -a $WS/disk/boot/grub/grub.cfg > /dev/null <<EOF
menuentry 'Vyasa' {
    set root='(hd0,1)'
    linux /boot/vyasa root=/dev/sda1 rw 
}
EOF
#console=ttyS0

sync
sync
sync
$RUNAS umount  $WS/disk
$RUNAS qemu-nbd --disconnect /dev/nbd0
sync
sync
sync


duration=$SECONDS
echo -e "\e[1;33mPost processing took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

exit 0
