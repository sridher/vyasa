#!/usr/bin/env bash

set -e -u -o pipefail

# development environment
# bwrap/chroot develop
# nix develop

RUNAS="" # "" or doas or sudo

#https://www.shellhacks.com/bash-colors/
#❯ neofetch
# fg = 30..37
# bg = 40..47
# lfg = 1;{30..37}
# lbg = 1;{40..47}

# MODIFICATIONS: 0 -> Normal, 1 -> Bold, 4 -> Underline, 5 -> Blinking, 7 -> Reverse video char
# -e    	Enable interpretation of backslash escapes
# \e[   	Begin the color modifications
# COLORm	Color Code + ‘m’ at the end
# \e[0m 	End code in the color modifications
#
# echo -e "\e[COLORmSample Text\e[0m"
# echo -e "\e[COLOR1;COLOR2mSample Text\e[0m"

echo -e "\e[1;34mBuilding Vyasa linux....\e[0m"

WS="$(pwd)"
VYASA="$(pwd)"/rootfs
#VYASA_TGT=$(uname -m)-vyasa-linux-gnu
#VYASA_TGT=$(uname -m)-vyasa-linux-musl
export WS VYASA

# QEMU aarch64
# QEMU loongarch64
# QEMU riscv64
# QEMU x86_64

# Kernel arch
 
# dpkg-architecture

# binutils - https://sourceware.org/git/binutils-gdb bfd/cpu-*.c
# gcc -dumpmachine

# Linux	    QEMU    Debian	Binutils
# alpha  arc  arm  arm64  csky  hexagon  loongarch  m68k  microblaze  mips  nios2  openrisc  parisc  powerpc  riscv  s390  sh  sparc  um  x86  xtensa
# aarch64 alpha arm avr hexagon(*user) hppa i386 loongarch64 m68k microblaze microblazeel mips mips64 mips64el mipsel or1k ppc ppc64 riscv32 riscv64 rx s390x sh4 sh4eb sparc sparc64 tricore x86_64 x86_64(*microvm) xtensa xtensaeb 
# alpha amd64 arm arm64 armel armhf avr32 hppa hurd-i386 i386 ia64 kfreebsd-amd64 kfreebsd-i386 loong64 m68k mips mips64el mipsel powerpc powerpcspe ppc64 ppc64el riscv64 s390 s390x sh4 sparc sparc64 x32
# aarch64 alpha amdgcn arc arm avr bfin bpf cr16 cris crx csky d10v d30v dlx epiphany fr30 frv ft32 h8300 h8300.h hppa i386 ia64-opc ia64 iamcu ip2k iq2000 kvx lm32 loongarch m9s12x m32c m32r m68hc11 m68hc12 m68k m10200 m10300 m9s12xg mcore mep metag microblaze mips mmix moxie msp430 mt nds32 nfp ns32k or1k pdp11 pj powerpc pru riscv rl78 rs6000 rx s12z s390 score sh sparc spu tic4x tic6x tic30 tic54x tilegx tilepro v850 v850_rh850 vax visium wasm32 xgate xstormy16 xtensa z8k z80

TGT=$(bash -e ./scripts/detect uname -m)
HOST=$(bash -e ./scripts/detect uname -a)
GCC=$(bash -e ./scripts/detect gcc -dumpmachine)
FILE=$(bash -e ./scripts/detect file /usr/bin/file)
VYASA_TGT=$TGT-vyasa-linux-gcc

echo -e "\e[1;36m$HOST\e[0m"
echo -e "\e[1;36m Architecture: $TGT\e[0m"
echo -e "\e[1;36m Triplet: $GCC\e[0m"
echo -e "\e[1;36m File: $FILE\e[0m"
export VYASA_TGT

# Warmup admin
$RUNAS chown -R root:root "$VYASA"/{usr,lib,lib64,var,etc,bin,sbin}

# Cleanup
SECONDS=0
TOTALTIME=0

echo "--------------------------------" >> timings.txt
echo ":: Timing :: package :: duration" >> timings.txt
echo "------ Chroot Temp Tools -------" >> timings.txt

bash -e ./scripts/wrap /vyasa/chroot/pre

duration=$SECONDS
echo -e "\e[1;33mPre init took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

for pack in gettext bison perl python texinfo util-linux; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/chroot/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
echo ":: $duration :: $pack :: took $((duration / 60)) minutes and $((duration % 60)) seconds." >> timings.txt
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Building Kernel and Diskimage
#❯ qemu-system-x86_64 -machine pc,accel=kvm -cpu host vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu host -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu EPYC-v4 -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot

# Packages
echo "--------------------------------" >> timings.txt
echo ":: Timing :: package :: duration" >> timings.txt
echo "----------- Packages -----------" >> timings.txt

for pack in man-pages iana glibc zlib bzip xz lz4 zstd file readline m4 bc binutils ncurses nano openssl wget libcap flex iproute dnsmasq2; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/pkgs/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
echo ":: $duration :: $pack :: took $((duration / 60)) minutes and $((duration % 60)) seconds." >> timings.txt
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Cleanup
bash -e ./scripts/wrap /vyasa/chroot/cleanup

#cd $VYASA
# create, --lzip, J(xz), --zstd, permissions, file
#❯ doas tar -cJpf vyasa-temp-tools.tar.xz .
#❯ doas tar --lzip -cpf vyasa-temp-tools.tar.lz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.txz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.tar.xz .
#❯ doas tar --sort=name --mtime="@0" --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime  -cJpf build.tar.xz builddir
#cd $WS

#❯ sha vyasa-temp-tools.tar.xz

# Kernel
echo "--------------------------------" >> timings.txt
echo ":: Timing :: package :: duration" >> timings.txt
echo "-----------  Kernel  -----------" >> timings.txt

for pack in kernel configs; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/pkgs/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
echo ":: $duration :: $pack :: took $((duration / 60)) minutes and $((duration % 60)) seconds." >> timings.txt
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# fdisk
cd $WS

$RUNAS modprobe nbd max_parts=8

$RUNAS rm -f vyasa.qcow2
qemu-img create -f qcow2 vyasa.qcow2 7G

#lsmod | grep nbd
#modprobe nbd max_parts=8
lsmod | grep nbd

#echo -e "\e[1;33mAdmin authentication.......\e[0m"
$RUNAS qemu-nbd --connect=/dev/nbd0 vyasa.qcow2
sleep 5

$RUNAS fdisk /dev/nbd0 <<EOF
g
n
1

+512M
n
2


w
EOF
$RUNAS fdisk -l /dev/nbd0
lsblk -a | grep nbd0
#mknod /dev/nbd0p1 b 43 1
$RUNAS mkfs.ext4 /dev/nbd0p2

mkdir $WS/disk -p
$RUNAS mount /dev/nbd0p2 $WS/disk

$RUNAS cp -R $VYASA/* $WS/disk

mkdir $WS/disk/boot/efi -p
$RUNAS mkfs.fat -F 32 /dev/nbd0p1
$RUNAS mount /dev/nbd0p1 $WS/disk/boot/efi/
sync
sync

#grub
#$RUNAS grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0

#grub-efi 
#arm-efi, arm64-efi, i386-efi, ia64-efi, riscv32-efi, riscv64-efi, x86_64-efi
#$RUNAS grub-install --target=$(uname -m)-efi --efi-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0

case "$(uname -m)" in
	aarch64) $RUNAS grub-install -d ../../usr/lib/grub/arm64-efi --target=arm64-efi --efi-directory=$WS/disk/boot/efi --boot-directory=$WS/disk/boot --no-floppy --bootloader-id="Vyasa" --modules="normal part_msdos ext2" --recheck --verbose /dev/nbd0
	;;
	loongarch64) $RUNAS grub-install -d ../../usr/lib/grub/loongarch64-efi --target=loongarch64-efi --efi-directory=$WS/disk/boot/efi --boot-directory=$WS/disk/boot --no-floppy --bootloader-id="Vyasa" --modules="normal part_msdos ext2" --recheck --verbose /dev/nbd0
	;;
	riscv64) $RUNAS grub-install -d ../../usr/lib/grub/riscv64-efi --target=riscv64-efi --efi-directory=$WS/disk/boot/efi --boot-directory=$WS/disk/boot --no-floppy --bootloader-id="Vyasa" --modules="normal part_msdos ext2" --recheck --verbose /dev/nbd0
	;;
	x86_64) $RUNAS grub-install -d ../../usr/lib/grub/x86_64-efi --target=x86_64-efi --efi-directory=$WS/disk/boot/efi --boot-directory=$WS/disk/boot --no-floppy --bootloader-id="Vyasa" --modules="normal part_msdos ext2" --recheck --verbose /dev/nbd0
	;;
	#2|3) echo 2 or 3
	#;;
	*) echo -e "\e[1;36mERROR: Architecture not supported for bootloader.\e[0m"
	;;
esac

#grub-install: info: copying `/usr/lib/shim/shimx64.efi.signed' -> `/home/js/Work/vyasa-amd64/home/vyasa/disk/boot/efi/EFI/Vyasa/shimx64.efi'.
#grub-install: info: copying `/usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed' -> `/home/js/Work/vyasa-amd64/home/vyasa/disk/boot/efi/EFI/Vyasa/grubx64.efi'.

# x86 or arm
#arch/x86/boot/bzImage bzImage.efi
#Passing kernel parameters from the EFI shell
#fs0:> bzImage.efi console=ttyS0 root=/dev/sda2
#$RUNAS cp $VYASA/boot/vyasa $WS/disk/boot/efi/EFI/Vyasa/vyasa.efi

##efibootmgr
#ROOT_UUID=$(blkid -s UUID -o value /dev/nbd0p2)
##$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Grub" -l '\EFI\Grub\grubx64.efi'
##$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" -l '\EFI\Vyasa\bzImage.efi'
#$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /boot/vyasa --unicode "root=$ROOT_UUID rw console=tty0 console=ttyS0"
##efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /boot/vyasa --unicode 'root=#UUID or by-id## rw initrd=\initramfs-linux.img'
##efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /vmlinuz-linux --unicode 'root=#BLOCK_IDENTIFIER## rw initrd=\initramfs-linux.img'
##$RUNAS efibootmgr --create --disk /dev/nbd0 --part 1 --label "Vyasa Linux" --loader '\EFI\limine\BOOTX64.EFI' --unicode --verbose

$RUNAS efibootmgr -d /dev/nbd0 -v

mkdir $WS/disk/boot/grub -p
$RUNAS tee -a $WS/disk/boot/grub/grub.cfg > /dev/null <<EOF
set default=0
set timeout=5

insmod part_gpt
insmod ext2

set prefix=(hd0,2)/boot/grub
set root=(hd0,2)

insmod normal
insmod linux

menuentry 'Vyasa' {
    linux /boot/vyasa root=/dev/sda2 rw
}
menuentry 'Vyasa (console)' {
    linux /boot/vyasa root=/dev/sda2 rw console=tty0 console=ttyS0
}

EOF

sync
sync
sync
$RUNAS umount $WS/disk/boot/efi
$RUNAS umount $WS/disk

$RUNAS qemu-nbd --disconnect /dev/nbd0
sync
sync
sync


$RUNAS rm builds/* vbuilds/* -rfd

duration=$SECONDS
echo -e "\e[1;33mPost processing took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

echo -e "\e[1;36mTotal time took: $((TOTALTIME / 60)) minutes and $((TOTALTIME % 60)) seconds elapsed.\e[0m"
exit 0
