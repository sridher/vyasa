#!/usr/bin/env bash

set -e -u -o pipefail

# development environment
# bwrap/chroot develop
# nix develop

RUNAS="" # "" or doas or sudo

#https://www.shellhacks.com/bash-colors/
#❯ neofetch
# fg = 30..37
# bg = 40..47
# lfg = 1;{30..37}
# lbg = 1;{40..47}

# MODIFICATIONS: 0 -> Normal, 1 -> Bold, 4 -> Underline, 5 -> Blinking, 7 -> Reverse video char
# -e    	Enable interpretation of backslash escapes
# \e[   	Begin the color modifications
# COLORm	Color Code + ‘m’ at the end
# \e[0m 	End code in the color modifications
#
# echo -e "\e[COLORmSample Text\e[0m"
# echo -e "\e[COLOR1;COLOR2mSample Text\e[0m"

echo -e "\e[1;34mBuilding Vyasa linux....\e[0m"

WS="$(pwd)"
VYASA="$(pwd)"/rootfs
VYASA_TGT=$(uname -m)-vyasa-linux-gnu
#VYASA_TGT=$(uname -m)-vyasa-linux-musl

# Warmup admin
$RUNAS echo -e "\e[1;36m$(uname -a)\e[0m"
$RUNAS chown -R root:root "$VYASA"/{usr,lib,lib64,var,etc,bin,sbin}

# Cleanup
SECONDS=0
TOTALTIME=0

export WS VYASA VYASA_TGT
echo "--------------------------------" >> timings.txt
echo ":: Timing :: package :: duration" >> timings.txt
echo "------ Chroot Temp Tools -------" >> timings.txt

bash -e ./scripts/wrap /vyasa/chroot/pre

duration=$SECONDS
echo -e "\e[1;33mPre init took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

for pack in gettext bison perl python texinfo util-linux; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/chroot/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
echo ":: $duration :: $pack :: took $((duration / 60)) minutes and $((duration % 60)) seconds." >> timings.txt
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Building Kernel and Diskimage
#❯ qemu-system-x86_64 -machine pc,accel=kvm -cpu host vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu host -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu EPYC-v4 -smp cpus=2 -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot

# Packages
echo "--------------------------------" >> timings.txt
echo ":: Timing :: package :: duration" >> timings.txt
echo "----------- Packages -----------" >> timings.txt

for pack in man-pages iana glibc zlib bzip xz lz4 zstd file readline m4 bc binutils ncurses nano openssl wget libcap flex iproute dnsmasq2; 
do
    echo $pack
    echo -e "\e[1;34m\nInstalling $pack ....\n\e[0m"

    bash -e ./scripts/wrap /vyasa/pkgs/$pack
    
duration=$SECONDS
echo -e "\e[1;33m$pack took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
echo ":: $duration :: $pack :: took $((duration / 60)) minutes and $((duration % 60)) seconds." >> timings.txt
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0
done

# Cleanup
bash -e ./scripts/wrap /vyasa/chroot/cleanup

#cd $VYASA
# create, --lzip, J(xz), --zstd, permissions, file
#❯ doas tar -cJpf vyasa-temp-tools.tar.xz .
#❯ doas tar --lzip -cpf vyasa-temp-tools.tar.lz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.txz .
#❯ doas tar --sort=name --mtime="@0" --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime -cJpf ../vyasa-temp-tools.tar.xz .
#❯ doas tar --sort=name --mtime="@0" --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime,delete=btime,delete=mtime  -cJpf build.tar.xz builddir
#cd $WS

#❯ sha vyasa-temp-tools.tar.xz

# Kernel
# ------------------------------
cd $WS/builds
tar -xf ../sources/linux-6.14.4.tar.xz

cd linux-6.14.4
make distclean
make tinyconfig

# Kernel config

#64BIT
#BLOCK
#BINFMT_ELF
#BINFMT_SCRIPT
#PRINTK
#DEVTMPFS
#DEVTMPFS_MOUNT
#PCI
#TTY
#SERIAL_8250
#SERIAL_8250_CONSOLE
#BLK_DEV_SD
#ATA
#ATA_PIIX
#EXT4_FS
#PROC_FS
#SYSFS

./scripts/config --set-val CONFIG_64BIT y
./scripts/config --set-val CONFIG_BLOCK y
./scripts/config --set-val CONFIG_BINFMT_ELF y
./scripts/config --set-val CONFIG_BINFMT_SCRIPT y
./scripts/config --set-val CONFIG_PRINTK y
./scripts/config --set-val CONFIG_DEVTMPFS y
./scripts/config --set-val CONFIG_DEVTMPFS_MOUNT y
./scripts/config --set-val CONFIG_PCI y
./scripts/config --set-val CONFIG_TTY y
./scripts/config --set-val CONFIG_SERIAL_8250 y
./scripts/config --set-val CONFIG_SERIAL_8250_CONSOLE y
./scripts/config --set-val CONFIG_BLK_DEV_SD y
./scripts/config --set-val CONFIG_ATA y
./scripts/config --set-val CONFIG_ATA_PIIX y
./scripts/config --set-val CONFIG_EXT4_FS y
./scripts/config --set-val CONFIG_PROC_FS y
./scripts/config --set-val CONFIG_SYSFS y

# Other options
#./scripts/config --set-val CONFIG_TTY_PRINTK y
./scripts/config --set-val CONFIG_EARLY_PRINTK y
#./scripts/config --set-val CONFIG_VIRTIO_CONSOLE y
#./scripts/config --set-val CONFIG_VT_HW_CONSOLE_BINDING y

./scripts/config --set-val CONFIG_KEYS y
./scripts/config --set-val CONFIG_EVENTFD y
./scripts/config --set-val CONFIG_DNS_RESOLVER y
./scripts/config --set-val CONFIG_POSIX_TIMERS y

# File locking
./scripts/config --set-val CONFIG_FILE_LOCKING y

# Network
#EXPERT
#FUTEX
#COMPAT_32BIT_TIME
#NET
#PACKET
#UNIX
#INET
#NETDEVICES
#ETHERNET
#E1000
#INOTIFY_USER

./scripts/config --set-val CONFIG_EXPERT y
./scripts/config --set-val CONFIG_FUTEX y
./scripts/config --set-val CONFIG_COMPAT_32BIT_TIME y
./scripts/config --set-val CONFIG_NET y
./scripts/config --set-val CONFIG_PACKET y
./scripts/config --set-val CONFIG_UNIX y
./scripts/config --set-val CONFIG_INET y
./scripts/config --set-val CONFIG_NETDEVICES y
./scripts/config --set-val CONFIG_ETHERNET y
./scripts/config --set-val CONFIG_E1000 y
./scripts/config --set-val CONFIG_INOTIFY_USER y

# efi/uefi
#EFI_STUB
#EFI_PARTITION
#EFIVAR_FS
#VFAT_FS

./scripts/config --set-val CONFIG_EFI y
./scripts/config --set-val CONFIG_EFIVAR_FS y
./scripts/config --set-val CONFIG_EFI_STUB y
./scripts/config --set-val CONFIG_EFI_PARTITION y
./scripts/config --set-val CONFIG_VFAT_FS y

# QEMU q35
./scripts/config --set-val CONFIG_E1000E y
./scripts/config --set-val CONFIG_SCSI_TGT y
./scripts/config --set-val CONFIG_SATA_AHCI y
./scripts/config --set-val CONFIG_SATA_AHCI_PLATFORM y
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu EPYC -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot
#❯ qemu-system-x86_64 -machine q35,accel=kvm -cpu Skylake-Server -m 4G vyasa.qcow2 -nographic -serial mon:stdio --no-reboot

# QEMU virt
#./scripts/config --set-val CONFIG_PCI y
#./scripts/config --set-val CONFIG_VIRTIO_PCI y
#./scripts/config --set-val CONFIG_PCI_HOST_GENERIC y
# virtio-gpu-pci
#./scripts/config --set-val CONFIG_DRM y
#./scripts/config --set-val CONFIG_DRM_VIRTIO_GPU y

#make defconfig
#make oldconfig
make olddefconfig

mv .config vyasa-miniconfig 
make allnoconfig KCONFIG_ALLCONFIG=vyasa-miniconfig
cp .config vyasa-config 

make -j$(nproc)
cp arch/x86/boot/bzImage $VYASA/boot/vyasa
cd $WS

duration=$SECONDS
echo -e "\e[1;33mKernel compile took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0


# LD
#echo -e "\e[1;32m$($VYASA/lib/libc.so $VYASA/usr/bin/uname -a)\e[0m"
#ldconfig /usr/local/lib64/
#openssl version -a
#echo "/lib:/usr/local/lib:/usr/lib" > /etc/ld-musl-x86_64.path
#$VYASA/bin/ld --help # check
$VYASA/bin/ld.so --help # check
$RUNAS tee -a $VYASA/etc/nsswitch.conf > /dev/null <<EOF
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF

$RUNAS mkdir -pv $VYASA/etc/ld.so.conf.d
$RUNAS tee -a $VYASA/etc/ld.so.config > /dev/null <<EOF
/lib
/lib64
/usr/lib
/usr/lib64
/usr/local/lib
/usr/local/lib64
/opt/lib
include /etc/ld.so.conf.d/*.conf
EOF

#❯ ldconfig # target machine
# ldconfig -p # target machine
# ldconfig -n /usr/lib64/libssl.so.3
#❯ ldconfig -v -r -f etc/ld.so.config -C etc/ld.so.cache ./
#❯ ldconfig -v -r -f /etc/ld.so.config -C /etc/ld.so.cache ./
#/tmp # ldd /usr/bin/openssl

# fdisk
cd $WS

$RUNAS modprobe nbd max_parts=8

$RUNAS rm -f vyasa.qcow2
qemu-img create -f qcow2 vyasa.qcow2 7G

#lsmod | grep nbd
#modprobe nbd max_parts=8
lsmod | grep nbd

#echo -e "\e[1;33mAdmin authentication.......\e[0m"
$RUNAS qemu-nbd --connect=/dev/nbd0 vyasa.qcow2
sleep 5

$RUNAS fdisk /dev/nbd0 <<EOF
g
n
1

+512M
n
2


w
EOF
$RUNAS fdisk -l /dev/nbd0
lsblk -a | grep nbd0
#mknod /dev/nbd0p1 b 43 1
$RUNAS mkfs.ext4 /dev/nbd0p2

mkdir $WS/disk -p
$RUNAS mount /dev/nbd0p2 $WS/disk

$RUNAS cp -R $VYASA/* $WS/disk

mkdir $WS/disk/boot/efi -p
$RUNAS mkfs.fat -F 32 /dev/nbd0p1
$RUNAS mount /dev/nbd0p1 $WS/disk/boot/efi/
sync
sync

#grub
#$RUNAS grub-install --target=i386-pc --root-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0

#grub-efi 
#arm-efi, arm64-efi, i386-efi, ia64-efi, riscv32-efi, riscv64-efi, x86_64-efi
#$RUNAS grub-install --target=$(uname -m)-efi --efi-directory=$WS/disk --no-floppy --modules="normal part_msdos ext2 multiboot" /dev/nbd0
$RUNAS grub-install --target=x86_64-efi --efi-directory=$WS/disk/boot/efi --boot-directory=$WS/disk/boot --no-floppy --bootloader-id="Vyasa" --modules="normal part_msdos ext2 multiboot" --recheck --verbose /dev/nbd0

#grub-install: info: copying `/usr/lib/shim/shimx64.efi.signed' -> `/home/js/Work/vyasa-amd64/home/vyasa/disk/boot/efi/EFI/Vyasa/shimx64.efi'.
#grub-install: info: copying `/usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed' -> `/home/js/Work/vyasa-amd64/home/vyasa/disk/boot/efi/EFI/Vyasa/grubx64.efi'.

# x86 or arm
#arch/x86/boot/bzImage bzImage.efi
#Passing kernel parameters from the EFI shell
#fs0:> bzImage.efi console=ttyS0 root=/dev/sda2
$RUNAS cp $VYASA/boot/vyasa $WS/disk/boot/efi/EFI/Vyasa/vyasa.efi

##efibootmgr
#ROOT_UUID=$(blkid -s UUID -o value /dev/nbd0p2)
##$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Grub" -l '\EFI\Grub\grubx64.efi'
##$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" -l '\EFI\Vyasa\bzImage.efi'
#$RUNAS efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /boot/vyasa --unicode "root=$ROOT_UUID rw console=tty0 console=ttyS0"
##efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /boot/vyasa --unicode 'root=#UUID or by-id## rw initrd=\initramfs-linux.img'
##efibootmgr -c -d /dev/nbd0 -p 1 -L "Vyasa" --loader /vmlinuz-linux --unicode 'root=#BLOCK_IDENTIFIER## rw initrd=\initramfs-linux.img'
##$RUNAS efibootmgr --create --disk /dev/nbd0 --part 1 --label "Vyasa Linux" --loader '\EFI\limine\BOOTX64.EFI' --unicode --verbose


$RUNAS ls -lah $WS/disk/boot/efi
$RUNAS efibootmgr -d /dev/nbd0 -v

mkdir $WS/disk/boot/grub -p
$RUNAS tee -a $WS/disk/boot/grub/grub.cfg > /dev/null <<EOF
set default=0
set timeout=5

insmod part_gpt
insmod ext2

set prefix=(hd0,2)/boot/grub
set root=(hd0,2)

insmod normal
insmod linux

menuentry 'Vyasa' {
    linux /boot/vyasa root=/dev/sda2 rw
}
menuentry 'Vyasa (console)' {
    linux /boot/vyasa root=/dev/sda2 rw console=tty0 console=ttyS0
}

EOF

sync
sync
sync
$RUNAS umount $WS/disk/boot/efi
$RUNAS umount $WS/disk

$RUNAS qemu-nbd --disconnect /dev/nbd0
sync
sync
sync


$RUNAS rm builds/* vbuilds/* -rfd

duration=$SECONDS
echo -e "\e[1;33mPost processing took: $((duration / 60)) minutes and $((duration % 60)) seconds elapsed.\e[0m"
TOTALTIME=$((TOTALTIME + duration))
SECONDS=0

echo -e "\e[1;36mTotal time took: $((TOTALTIME / 60)) minutes and $((TOTALTIME % 60)) seconds elapsed.\e[0m"
exit 0
